irisdata <- read.csv("http://www.heatonresearch.com/dload/data/iris.csv",head=TRUE,sep=",")
irisTrainData = sample(1:150,100)
irisValData = setdiff(1:150,irisTrainData)
library(kernlab)
rbf <- rbfdot(sigma=0.1)
irisSVM <- ksvm(species~.,data=irisdata[irisTrainData,],type="C-bsvc",kernel=rbf,C=10,prob.model=TRUE)
fitted(irisSVM)
predict(irisSVM, irisdata[irisValData,-5], type="probabilities")
library(nnet)
ideal <- class.ind(irisdata$species)
irisANN = nnet(irisdata[irisTrainData,-5], ideal[irisTrainData,], size=10, softmax=TRUE)
predict(irisANN, irisdata[irisValData,-5], type="class")
help(predict.glm)
predict(irisANN, irisdata[irisValData,-5], type="probabilities")
predict(irisANN, irisdata[irisValData,-5], type="raw")
q()
rm(list = ls())
q()
ls()
library(ISLR)
summary(Hitters)
Hitters=na.omit(Hitters)
with(Hitters,sum(is.na(Salary)))
library(leaps)
regfit.full=regsubsets(Salary~.,data=Hitters)
summary(regfit.full)
regfit.full=regsubsets(Salary~.,data=Hitters, nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp")
which.min(reg.summary$cp)
points(10,reg.summary$cp[10],pch=20,col="red")
```
plot(regfit.full,scale="Cp")
coef(regfit.full,10)
dim(Hitters)
set.seed(1)
train=sample(seq(263),180,replace=FALSE)
regfit.fwd=regsubsets(Salary~.,data=Hitters[train,],nvmax=19,method="forward")
val.errors=rep(NA,19)
x.test=model.matrix(Salary~.,data=Hitters[-train,])# notice the -index!
for(i in 1:19){
coefi=coef(regfit.fwd,id=i)
pred=x.test[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(val.errors),ylab="Root MSE",ylim=c(300,400),pch=19,type="b")
points(sqrt(regfit.fwd$rss[-1]/180),col="blue",pch=19,type="b")
legend("topright",legend=c("Training","Validation"),col=c("blue","black"),pch=19)
predict.regsubsets=function(object,newdata,id,...){
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
mat[,names(coefi)]%*%coefi
}
set.seed(11)
folds=sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors=matrix(NA,10,19)
for(k in 1:10){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=k,],nvmax=19,method="forward")
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==k,],id=i)
cv.errors[k,i]=mean( (Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv=sqrt(apply(cv.errors,2,mean))
plot(rmse.cv,pch=19,type="b")
```
library(glmnet)
install.packages("glmnet")
library(glmnet)
x=model.matrix(Salary~.-1,data=Hitters)
y=Hitters$Salary
fit.ridge=glmnet(x,y,alpha=0)
plot(fit.ridge,xvar="lambda",label=TRUE)
cv.ridge=cv.glmnet(x,y,alpha=0)
plot(cv.ridge)
fit.lasso=glmnet(x,y)
plot(fit.lasso,xvar="lambda",label=TRUE)
cv.lasso=cv.glmnet(x,y)
plot(cv.lasso)
coef(cv.lasso)
lasso.tr=glmnet(x[train,],y[train])
lasso.tr
pred=predict(lasso.tr,x[-train,])
dim(pred)
rmse= sqrt(apply((y[-train]-pred)^2,2,mean))
plot(log(lasso.tr$lambda),rmse,type="b",xlab="Log(lambda)")
lam.best=lasso.tr$lambda[order(rmse)[1]]
lam.best
coef(lasso.tr,s=lam.best)
```
names(cv.glmnet)
?cv.glmnet
ls()
source("http://www.openintro.org/stat/data/present.R")
ls()
str(present)
dim(present)
names(present)
length(present$girls)
plot(present$girls)
plot(present$girls, present$year)
plot(present$year, present$girls)
plot(present$year, present$boys)
plot(present$year, present$boys + present$girls)
present$year(1960)
present[, 10]
plot(present$year, present$boys/present$girls)
A <- present$boys > present$girls
summary(A)
B <- (present$boys - present$girls)
summary(B)
plot(present$year, B)
present[15:25, ]
plot(present$boys / present$girls)
plot(presnet$year, present$boys/present$girls)
plot(present$year, present$boys/present$girls)
X <- present$boys + present$girls
which.max(X)
present$year[22]
plot(present$year, present$boys / (present$boys + present$girls))
which.max(B)
present$year[24]
D <- c(present[,], B)
str(D)
rm(D)
cbind(present, B)
q()
ls()
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 +100
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
?':'
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_seq(5,10, length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my-seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 400)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name(c(my_char, "Bob"))
my_name <- c(my_char, "Bob")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <-
| x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x
i <- c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf= NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vext2) <- c("foo", "bar", "nofr")
names(vect2 <- c("foo", "bar", "nofr"))
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myvector <- 1:20
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20, 5, 4)
myMatrix2 <- matrix(1:20, nrow=5, ncol=4)
myMatrix2 <- matrix(1:20, 4, 5 )
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patientss, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(MyData)
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames <- cnames
colnames(cnames)
colnames(myData) <- cnames
myData
ls()
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
str(iris)
summary(iris)
virg <- subset(iris, Species = "virginica")
summary(virg)
virg <- subset(iris, Species == "virginica")
dim(virg)
summary(virg)
apply(iris, 2, mean)
?apply
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
data(mtcars)
with(mtcars, tapply(mpg, cal, mean))
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
str(mtcars)
with(mtcars, tapply(mpg, hp, mean))
with(mtcars, tapply(hp, cyl, mean))
209.21429 - 82.63636
debug(ls)
ls()
n
wxit
exit
n
n
n
n
n
n
getwd()
setwd("C:/Documents and Settings/Bob/Desktop/data3")
source("cache_means.R")
A <- c(seq(1,10))
makeVector(A)
A
str(A)
A <- seq(1,9)
class(A)
str(A)
cache_means(A)
cachemean(A)
makeVector(A)
makeVector(x = numeric(A))
cachemean(A)
B <- cachemean(A)
ls()
rm(A)
A <- makeVector(c(1,2,3))
B <- cachemean(A)
B
A$get()
A$getmean()
a$set(matrix(5:8,2))
a <- makeCacheMatrix(matrix(1:4,2))
a <- makeInv(matrix(1:4,2))
getwd()
setwd("C:/Documents and Settings/Bob/Desktop/data3/caching")
source("cache_inverse.R")
a <- makeInv(matrix(1:4,2))
class(a)
a$get()
cacheInv(a)
source("cache_inverse.R")
a <- makeInv(matrix(1:4,2))
cacheInv(a)
source("cache_inverse.R")
a <- makeInv(matrix(1:4,2))
cacheInv(a)
ls()
rm(list=ls())
source("cache_inverse.R")
a <- makeInv(matrix(1:4,2))
cacheInv(a)
b <- a$getinv()
a %*% b
a
a$geta
a$get()
b$get()
b
b %*% a$get()
D <- makeInv(matrix(1:9,3))
D$get()
E <- cacheInv(D)
rm(list=ls())
getwd()
setwd("C:/Documents and Settings/Bob/Desktop/data3/caching/ProgrammingAssignment2")
getwd()
source("cachematrix.R")
a <- makeCacheMatrix(matrix(1:4,2))
b <- cachesolve(a)
cacheSolve(a)
m <- makeCacheMatrix(matrix(1:16, 4))
m$get()
cacheSolve(m)
m <- makeCacheMatrix(matrix(8:17, 3))
m$get()
m <- makeCacheMatrix(matrix(8:16, 3))
m$get()
n <- cacheSolve(m)
p <- makeCacheMatrix(matrix(rnorm(100), 10, 10))
q <- cacheSolve(p)
q
